getgenv().Config = {
    ["Account Hold Gem"] = { "congahpz001", "congahpz002", "congahpz003"  },
    ["Gem"] = "500m",
    ["Time"] = 2,         -- minutes
    ["Time Remove"] = 10, -- minutes
    ["Url Webhook"] =
    "https://discord.com/api/webhooks/1344557727950700625/kE5E-6vdNA1BLXqUVKO8KHxFQlIPNPbKW1K5jMAW5FAV7j7kjt7_8GYAv7TVCA9unngF",
    ["Url Webhook Plaza"] =
    "https://discord.com/api/webhooks/1344557851619622994/Vy32BUZvmsiEP-Qg01VomWeyYSV7CDB6qXqI90v6DJBRNrWDmnqhLsHTA63NCPfbhAse",

}
getgenv().hugemode = {
    [1] = {
        ["Min"] = "1m",
        ["Max"] = "50m",
        ["% Sell"] = 0.95,
    },
    [2] = {
        ["Min"] = "51m",
        ["Max"] = "100m",
        ["% Sell"] = 0.55,
    },
    [3] = {
        ["Min"] = "101m",
        ["Max"] = "500m",
        ["% Sell"] = 0.35,
    },
    [4] = {
        ["Min"] = "501m",
        ["Max"] = "9000m",
        ["% Sell"] = 0.15,
    }
}
getgenv().item = {
    ["Hype Egg 2"] = 0.98,
    ["Fantasy Pack"] = 0.93,
    ["Nightmare Pack"] = 0.93,
    ["Retro Pack"] = 0.92,
}
repeat wait() until game:IsLoaded()
local VirtualUser = game:service 'VirtualUser'
game:service('Players').LocalPlayer.Idled:connect(function()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
end)

repeat
    wait()
until game:IsLoaded() and
    game:GetService("Players").LocalPlayer:FindFirstChild("PlayerGui") and
    game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("MainLeft") and
    game:GetService("Players").LocalPlayer.PlayerGui.MainLeft.Left.Currency.Diamonds.Diamonds.Visible == true and
    not game:GetService("Players").LocalPlayer:FindFirstChild("GUIFX Holder")
spawn(function()
    repeat wait() until game.Workspace.DistributedGameTime >= 35
    while wait(getgenv().Config["Time"] * 60) do
        game:GetService("ReplicatedStorage").Network["Mailbox: Claim All"]:InvokeServer()
    end
end)
local save = require(game:GetService("ReplicatedStorage").Library.Client.Save)
local v_u_5 = require(game.ReplicatedStorage.Library.Functions)
local totalhuge = 0
spawn(function()
    while wait() do
        totalhuge = 0
        for i, v in pairs(save.Get().Inventory.Pet) do
            if string.find(v.id, "Huge") then
                totalhuge = totalhuge + 1
            end
        end
    end
end)
if game.PlaceId == 8737899170 then
    local TeleportService = game:GetService("TeleportService")
    if totalhuge >= 5 then
        TeleportService:Teleport(15588442388)
    else
        TeleportService:Teleport(15502339080)
    end
end
function formatNumber(v)
    return tostring(v):reverse():gsub("%d%d%d", "%1,"):reverse():gsub("^,", "")
end

local function loggem(user, gem)
    local Message = {
        ['username'] = "Pet 99 Log",
        ["content"] = "@everyone\nUserName: " .. user .. "\nSend Done: " .. formatNumber(gem)

    }
    local DataCallBack = request({
        Url = getgenv().Config["Url Webhook"],
        Method = 'POST',
        Headers = {
            ["Content-Type"] = "application/json"
        },
        Body = game:GetService("HttpService"):JSONEncode(Message)
    })
end

local function logplaza(item, rap, value)
    local Message = {
        ['username'] = "Pet 99 Log",
        ["content"] = "Start Sell Item: " ..
            item .. "\nRap Item: " .. formatNumber(rap) .. "\nSell Value: " .. formatNumber(value),

    }
    local DataCallBack = request({
        Url = getgenv().Config["Url Webhook Plaza"],
        Method = 'POST',
        Headers = {
            ["Content-Type"] = "application/json"
        },
        Body = game:GetService("HttpService"):JSONEncode(Message)
    })
end
if game.PlaceId == 15588442388 or game.PlaceId == 15502339080 then
    function getnearboot()
        local pos
        local distance = math.huge
        local id = nil

        for i, v in next, workspace.TradingPlaza.BoothSpawns:GetChildren() do
            local boothPosition = v.WorldPivot.Position
            local playerPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.Position
            local currentDistance = (boothPosition - playerPosition).Magnitude

            if currentDistance < distance then
                distance = currentDistance
                pos = boothPosition
                id = v:GetAttribute("ID")
            end
        end
        return pos, id
    end

    local pos, id = getnearboot()

    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(pos + Vector3.new(-5, 5, 0))
    wait()

    local args = {
        [1] = tostring(id)
    }
    game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Booths_ClaimBooth"):InvokeServer(unpack(
        args))
    local Items = require(game:GetService("ReplicatedStorage").Library.Items.Types)
    function getgemneed()
        local v32 = require(game.ReplicatedStorage.Library.Types.Mailbox);
        local v27 = require(game.ReplicatedStorage.Library.Balancing.Constants);

        local l_MailboxDiamondCost_0 = v27.MailboxDiamondCost;
        local v26 = require(game.ReplicatedStorage.Library.Client.Save);

        local v66 = v26.Get();
        return l_MailboxDiamondCost_0 * math.pow(v32.DiamondCostGrowthRate, v66.MailboxSendsSinceReset)
    end

    function sendgem(iditem)
        local gem = game:GetService("Players").LocalPlayer.leaderstats["\240\159\146\142 Diamonds"].Value -
            getgemneed()
        local account = getgenv().Config["Account Hold Gem"][math.random(1, #getgenv().Config["Account Hold Gem"])]
        local args = {
            [1] = account,
            [2] = "Made By Honglamx",
            [3] = "Currency",
            [4] = tostring(iditem),
            [5] = gem
        }
        if game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mailbox: Send"):InvokeServer(
                unpack(args)) then
            loggem(account, gem)
        end
    end

    spawn(function()
        while wait() do
            if game:GetService("Players").LocalPlayer.leaderstats["\240\159\146\142 Diamonds"].Value >= v_u_5.ParseNumberSmart(getgenv().Config["Gem"]) then
                for i, v in pairs(save.Get().Inventory.Currency) do
                    if v.id == "Diamonds" then
                        sendgem(i)
                    end
                end
            end
        end
    end)
    spawn(function()
        while wait(getgenv().Config["Time Remove"] * 60) do
            if game.PlaceId == 15588442388 or game.PlaceId == 15502339080 then
                local plr = game.Players.LocalPlayer
                for i, v in next, workspace.__THINGS.Booths:GetChildren() do
                    if v:GetAttribute("Owner") == plr.UserId then
                        for i1, v1 in next, v.Pets.BoothTop.PetScroll:GetChildren() do
                            if v1:IsA("Frame") then
                                local args = {
                                    [1] = v1.Name
                                }

                                game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild(
                                    "Booths_RemoveListing")
                                    :InvokeServer(
                                        unpack(args))
                            end
                        end
                    end
                end
            end
        end
    end)
    --[[
    local petItem = Items.Types["Misc"]:Get(i)
                        local petRAP = petItem:GetDevRAP() or 0
                        local args = {
                            [1] = tostring(i),
                            [2] = math.floor(petRAP * (getgenv().item[v.id] / 100)),
                            [3] = 5000
                        }
                        game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild(
                            "Booths_CreateListing"):InvokeServer(unpack(args))
    ]]
    while wait() do
        if game.PlaceId == 15588442388 or game.PlaceId == 15502339080 then
            for i, v in save.Get().Inventory do
                for i1, v1 in next, v do
                    local am = v1._am or 1
                    if getgenv().item[v1.id] and i ~= "Pet" then
                        local petItem = Items.Types[i]:Get(i1)
                        local petRAP = petItem:GetDevRAP() or 0
                        print(v1.id, v1._am, getgenv().item[v1.id])
                        if am >= 5000 and petRAP then
                            local args = {
                                [1] = tostring(i1),
                                [2] = petRAP * getgenv().item[v1.id],
                                [3] = 5000
                            }
                            if (game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild(
                                    "Booths_CreateListing"):InvokeServer(unpack(args))) then
                                logplaza(v1.id, petRAP, petRAP * getgenv().item[v1.id])
                            end
                        end
                        if am < 5000 and petRAP then
                            local args = {
                                [1] = tostring(i1),
                                [2] = petRAP * getgenv().item[v1.id],
                                [3] = am
                            }
                            if (game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild(
                                    "Booths_CreateListing"):InvokeServer(unpack(args))) then
                                logplaza(v1.id, petRAP, petRAP * getgenv().item[v1.id])
                            end
                        end
                    end
                end
            end
            for i, v in pairs(save.Get().Inventory.Pet) do
                if string.find(v.id, "Huge") then
                    local petItem = Items.Types["Pet"]:Get(i)
                    local petRAP = petItem:GetDevRAP() or 0

                    for _, range in pairs(getgenv().hugemode) do
                        local minRAP = v_u_5.ParseNumberSmart(range.Min)
                        local maxRAP = v_u_5.ParseNumberSmart(range.Max)

                        if minRAP <= petRAP and petRAP <= maxRAP then
                            local sellPercentage = range["% Sell"]
                            local price = math.floor(petRAP * (sellPercentage / 100))
                            local args = {
                                [1] = tostring(i),
                                [2] = price,
                                [3] = v._am or 1
                            }
                            if (game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild(
                                    "Booths_CreateListing"):InvokeServer(unpack(args))) then
                                logplaza(v.id, petRAP, petRAP * price)
                            end
                            task.wait(1)
                        end
                    end
                end
            end
        end
    end
end
