getgenv().Data = {
    ["Account Main"] = "congahpz002",
    ["UID"] = "123",
    ["Pets"] = {
        "Silly Egg",
        "King Doggy",
        "ROUND",
        "The Overlord",
        "Avernus",
        "MAN FACE GOD",
        "Giant Chocolate Chicken",
        "Easter Basket",
        "Godly Gem",
        "Dementor",
        "Royal Trophy",
        "Mech Robot",
        "Luminosity",
        "Jackpot"
    }
}
repeat
    wait()
until game:IsLoaded()
--repeat wait() until game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("Intro")
spawn(function()
    while wait() do
        pcall(function()
            if game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("Intro") then
                repeat
                    wait()
                    pcall(function()
                        if game:GetService("Players").LocalPlayer.PlayerGui.Intro.Graphics.Visible then
                            for i, v in getconnections(game:GetService("Players").LocalPlayer.PlayerGui.Intro.Play.Button.Activated) do
                                v.Function()
                            end
                        else
                            for i, v in getconnections(game:GetService("Players").LocalPlayer.PlayerGui.Intro.Graphics.Content.Low.Action.Button.Activated) do
                                v.Function()
                            end
                        end
                    end)
                until not game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("Intro") and game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("Intro").Enabled == false
            end
        end)
    end
end)
local LocalData = require(game.ReplicatedStorage.Client.Framework.Services.LocalData)
repeat
    wait()
until LocalData.IsReady()
local blacklist = {}
print("Data Loaded")
function getuserid()
    local PlayerService = game:GetService("Players")

    return PlayerService:GetUserIdFromNameAsync(getgenv().Data["Account Main"])
end

function isonline()
    local DataCallBack = request({
        Url = "http://157.66.27.219:3000/isonline?userid=" .. getuserid(),
        Method = "GET",
        Headers = {
            ["Content-Type"] = "application/json"
        },
    })
    local data = game:GetService("HttpService"):JSONDecode(DataCallBack.Body)

    if not data or next(data) == nil then
        return {}
    end

    return data.isOnline
end

function skip(id)
    for _, team in LocalData.Get().Teams do
        for i1, v1 in next, team.Pets do
            if v1 == id then
                return true
            end
        end
    end
end

function havepet()
    for i, v in LocalData.Get().Pets do
        if table.find(getgenv().Data["Pets"], v.Name) and not skip(v.Id) then
            return true
        end
    end
end

function post()
    local save = {}

    for i, v in LocalData.Get().Pets do
        if table.find(getgenv().Data["Pets"], v.Name) and not skip(v.Id) then
            save[v.Name] = save[v.Name] or {}
            table.insert(save[v.Name], v.Id .. ":" .. (v.Amount or 0))
        end
    end
    local payload = {
        ["key"] = getgenv().Data["UID"],
        ["accounts"] = {
            [game.Players.LocalPlayer.Name] = {
                ["Pets"] = save,
                ["JobId"] = game.JobId,
                ["PlaceId"] = game.PlaceId,
            }
        }
    }
    local DataCallBack = request({
        Url = "http://157.66.27.219:3000/addAccountByKey",
        Method = 'POST',
        Headers = {
            ["Content-Type"] = "application/json"
        },
        Body = game:GetService("HttpService"):JSONEncode(payload)
    })
    --print(game:GetService("HttpService"):JSONEncode(save))
end

function postmain()
    local payload = {
        ["key"] = getgenv().Data["UID"],
        ["accounts"] = {
            [game.Players.LocalPlayer.Name] = {
                ["JobId"] = game.JobId,
                ["PlaceId"] = game.PlaceId,
            }
        }
    }
    local DataCallBack = request({
        Url = "http://157.66.27.219:3000/postservermain",
        Method = 'POST',
        Headers = {
            ["Content-Type"] = "application/json"
        },
        Body = game:GetService("HttpService"):JSONEncode(payload)
    })
    --print(game:GetService("HttpService"):JSONEncode(save))
end

function Delete()
    local payload = {
        ["key"] = getgenv().Data["UID"],
        ["username"] = game.Players.LocalPlayer.Name,
    }
    local DataCallBack = request({
        Url = "http://157.66.27.219:3000/deleteAccountByKey",
        Method = 'POST',
        Headers = {
            ["Content-Type"] = "application/json"
        },
        Body = game:GetService("HttpService"):JSONEncode(payload)
    })
    print("Delete")
    --print(game:GetService("HttpService"):JSONEncode(save))
end

function GetDataMain()
    local res = request({
        Url = "http://157.66.27.219:3000/getdatamain?key=" .. getgenv().Data["UID"],
        Method = "GET"
    })

    local data = game:GetService("HttpService"):JSONDecode(res.Body)

    if not data or next(data) == nil then
        return {}
    end

    return data.data
end

function GetData()
    local res = request({
        Url = "http://157.66.27.219:3000/getAccountsByKey?key=" .. getgenv().Data["UID"],
        Method = "GET"
    })

    local data = game:GetService("HttpService"):JSONDecode(res.Body)

    if not data or next(data) == nil then
        return {}
    end

    return data.data
end

local TeleportService = game:GetService("TeleportService")
spawn(function()
    while wait() do
        if game.Players.LocalPlayer.Name == getgenv().Data["Account Main"] then
            if game.PlaceId ~= 98046029518959 then
                TeleportService:Teleport(98046029518959)
            else
                postmain()
            end
        end
    end
end)
spawn(function()
    while wait() do
        if isonline() then
            if game.Players.LocalPlayer.Name ~= getgenv().Data["Account Main"] then
                if havepet() then
                    if game.PlaceId ~= 98046029518959 then
                        TeleportService:Teleport(98046029518959)
                    else
                        post()
                    end
                else
                    if game.PlaceId ~= 85896571713843 then
                        Delete()
                        task.wait(2)
                        TeleportService:Teleport(85896571713843)
                    end
                end
            end
        end
    end
end)
local v_u_5 = require(game:GetService("ReplicatedStorage").Shared.Framework.Network.Remote)
getgenv().Save = nil
v_u_5.Event("TradeStarted"):Connect(function(p435)
    getgenv().Save = p435
end)

v_u_5.Event("TradeUpdated"):Connect(function(p438)
    getgenv().Save = p438
end)
spawn(function()
    while wait() do
        if game:GetService("Players"):FindFirstChild(getgenv().Data["Account Main"]) and game.Players.LocalPlayer.Name ~= getgenv().Data["Account Main"] then
            if not game:GetService("Players").LocalPlayer:GetAttribute("Trading") then
                local args = {
                    "TradeAcceptRequest",
                    game:GetService("Players"):WaitForChild(getgenv().Data["Account Main"])
                }
                game:GetService("ReplicatedStorage"):WaitForChild("Shared"):WaitForChild("Framework")
                    :WaitForChild(
                        "Network")
                    :WaitForChild("Remote"):WaitForChild("Event"):FireServer(unpack(args))
            end
        end
        if game.Players.LocalPlayer.Name == getgenv().Data["Account Main"] then
            for i, v in GetData() do
                if game:GetService("Players"):FindFirstChild(i) then
                    if not game:GetService("Players"):FindFirstChild(i):GetAttribute("Trading") then
                        local args = {
                            "TradeRequest",
                            game:GetService("Players"):WaitForChild(i)
                        }
                        game:GetService("ReplicatedStorage"):WaitForChild("Shared"):WaitForChild(
                            "Framework")
                            :WaitForChild(
                                "Network"):WaitForChild("Remote"):WaitForChild("Event"):FireServer(
                            unpack(
                                args))
                    end
                end
            end
        end
    end
end)
spawn(function()
    while wait() do
        if havepet() and not game:GetService("Players"):FindFirstChild(getgenv().Data["Account Main"]) and game.Players.LocalPlayer.Name ~= getgenv().Data["Account Main"] then
            for i, v in GetDataMain() do
                if v and v["JobId"] ~= tostring(game.JobId) then
                    game:GetService("TeleportService"):TeleportToPlaceInstance(v["PlaceId"], v["JobId"],
                        game.Players.LocalPlayer)
                end
            end
        end
    end
end)
spawn(function()
    while wait() do
        if game:GetService("Players"):FindFirstChild(getgenv().Data["Account Main"]) and game.Players.LocalPlayer.Name ~= getgenv().Data["Account Main"] then
            if game:GetService("Players").LocalPlayer:GetAttribute("Trading") then
                for i, v in GetData()[game.Players.LocalPlayer.Name].Pets do
                    for i1, v1 in next, v do
                        local abc = v1:split(":")
                        local am = tonumber(abc[2])
                        if tonumber(am) >= 1 then
                            for i2 = 0, tonumber(am) do
                                local args = {
                                    "TradeAddPet",
                                    abc[1] .. ":" .. tostring(am),
                                }
                                game:GetService("ReplicatedStorage"):WaitForChild("Shared"):WaitForChild(
                                    "Framework")
                                    :WaitForChild(
                                        "Network"):WaitForChild("Remote"):WaitForChild("Event"):FireServer(
                                    unpack(
                                        args))

                                am = am - 1

                                task.wait(1)
                            end
                        else
                            local args = {
                                "TradeAddPet",
                                v1,
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("Shared"):WaitForChild(
                                "Framework")
                                :WaitForChild(
                                    "Network"):WaitForChild("Remote"):WaitForChild("Event"):FireServer(
                                unpack(
                                    args))
                        end
                    end
                end
                if getgenv().Save.Party0.Accepted == false or getgenv().Save.Party1.Accepted == false then
                    local args = {
                        "TradeAccept"
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("Shared"):WaitForChild("Framework")
                        :WaitForChild("Network"):WaitForChild("Remote"):WaitForChild("Event"):FireServer(
                        unpack(
                            args))
                end
                if getgenv().Save.Party0.Accepted == true and getgenv().Save.Party1.Accepted == true then
                    local args = {
                        "TradeConfirm"
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("Shared"):WaitForChild("Framework")
                        :WaitForChild("Network"):WaitForChild("Remote"):WaitForChild("Event"):FireServer(
                        unpack(
                            args))
                end
            end
        end
    end
end)
spawn(function()
    while wait() do
        if game:GetService("Players"):FindFirstChild(getgenv().Data["Account Main"]) then
            if not game:GetService("Players").LocalPlayer:GetAttribute("Trading") then
                local args = {
                    "TradeAcceptRequest",
                    game:GetService("Players"):WaitForChild(getgenv().Data["Account Main"])
                }
                game:GetService("ReplicatedStorage"):WaitForChild("Shared"):WaitForChild("Framework")
                    :WaitForChild(
                        "Network")
                    :WaitForChild("Remote"):WaitForChild("Event"):FireServer(unpack(args))
            end
        end
    end
end)
spawn(function()
    while wait() do
        if game.Players.LocalPlayer.Name == getgenv().Data["Account Main"] then
            for i, v in GetData() do
                -- if v and v["JobId"] ~= tostring(game.JobId) then
                --     game:GetService("TeleportService"):TeleportToPlaceInstance(v["PlaceId"], v["JobId"],
                --         game.Players.LocalPlayer)
                -- end
                if game:GetService("Players"):FindFirstChild(i) then
                    if not game:GetService("Players"):FindFirstChild(i):GetAttribute("Trading") then
                        local args = {
                            "TradeRequest",
                            game:GetService("Players"):WaitForChild(i)
                        }
                        game:GetService("ReplicatedStorage"):WaitForChild("Shared"):WaitForChild(
                            "Framework")
                            :WaitForChild(
                                "Network"):WaitForChild("Remote"):WaitForChild("Event"):FireServer(
                            unpack(
                                args))
                    else
                        if getgenv().Save.Party0.Accepted == false or getgenv().Save.Party1.Accepted == false then
                            local args = {
                                "TradeAccept"
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("Shared"):WaitForChild(
                                "Framework")
                                :WaitForChild("Network"):WaitForChild("Remote"):WaitForChild("Event")
                                :FireServer(
                                    unpack(
                                        args))
                        end
                        if getgenv().Save.Party0.Accepted == true and getgenv().Save.Party1.Accepted == true then
                            local args = {
                                "TradeConfirm"
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("Shared"):WaitForChild(
                                "Framework")
                                :WaitForChild("Network"):WaitForChild("Remote"):WaitForChild("Event")
                                :FireServer(
                                    unpack(
                                        args))
                        end
                    end
                end
            end
        end
    end
end)
