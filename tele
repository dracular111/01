 local plrs = game:GetService("Players")
local plr = plrs.LocalPlayer
local tpService = game:GetService("TeleportService")
local getPlayers = plrs:GetPlayers()
local PlayerInServer = #getPlayers
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local placeId = game.PlaceId
local currentJobId = game.JobId
local uis = game:GetService("UserInputService")
local vim = game:GetService("VirtualInputManager")
local runService = game:GetService("RunService")

-- Ch·ªçn API ng·∫´u nhi√™n gi·ªØa Asc v√† Desc
local function getRandomAPI()
	local sortOrder = (math.random(1, 2) == 1) and "Asc" or "Desc"
	return string.format(
		"https://games.roblox.com/v1/games/%s/servers/Public?sortOrder=%s&limit=100&excludeFullGames=true",
		placeId,
		sortOrder
	)
end
 
-- H√†m l·∫•y danh s√°ch server h·ª£p l·ªá (c√≥ slot tr·ªëng)
local function getValidServers()
	local servers
	local attempts = 0
	repeat
		task.wait(5)
		local url = getRandomAPI()
 
		local success, response = pcall(function()
			return HttpService:JSONDecode(game:HttpGet(url)).data
		end)
 
		if success and response and #response > 0 then
			servers = {}
			for _, server in pairs(response) do
				if server.playing < server.maxPlayers and server.id ~= currentJobId then
					table.insert(servers, server)
				end
			end
			print("‚úÖ S·ªë l∆∞·ª£ng server h·ª£p l·ªá:", #servers)
		else
			warn("‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c danh s√°ch server! Th·ª≠ l·∫°i...")
		end
 
		attempts += 1
	until (servers and #servers > 0) or attempts >= 5
 
	return servers
end
 
-- H√†m rejoin n·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c server
local function rejoinServer()
	TeleportService:Teleport(placeId, player)
end
 
-- Retry flag ƒë·ªÉ tr√°nh spam
local retrying = false
 
-- T·ª± ƒë·ªông th·ª≠ l·∫°i n·∫øu teleport th·∫•t b·∫°i
TeleportService.TeleportInitFailed:Connect(function(failedPlayer, teleportResult, errorMessage)
	if failedPlayer == player and not retrying then
		retrying = true
		warn("‚ö†Ô∏è Teleport th·∫•t b·∫°i:", teleportResult, "-", errorMessage)
		task.wait(3)
		print("üîÅ ƒêang th·ª≠ l·∫°i teleport...")
		serverHop()
		retrying = false
	end
end)
 
-- H√†m nh·∫£y sang server kh√°c
function serverHop()
	local servers = getValidServers()
	if not servers or #servers == 0 then
		warn("‚ùå Kh√¥ng t√¨m th·∫•y server n√†o c√≥ ch·ªó tr·ªëng sau nhi·ªÅu l·∫ßn th·ª≠!")
		rejoinServer()
		return
	end
 
	local newServer = servers[math.random(1, #servers)]
	print("üîÑ ƒêang chuy·ªÉn sang server:", newServer.id)
	TeleportService:TeleportToPlaceInstance(placeId, newServer.id, player)
end

local Players = game:GetService('Players')
local Client = Players.LocalPlayer

_G.EnableFriendRequest = true
_G.EnableAutoAcceptFriendRequest = true
local interval = 60

local function SendFriendRequests()
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= Client then  
            Client:RequestFriendship(player)
        end
        wait(1) 
    end
end

local function AutoAcceptFriendRequests()

    Client.FriendRequestEvent:Connect(function(requestingPlayer)
        if _G.EnableAutoAcceptFriendRequest then
            Client:RequestFriendship(requestingPlayer) 
        end
    end)
end

local function MainLoop()
    while true do
        if _G.EnableFriendRequest then
            SendFriendRequests()
        end
        wait(interval)
    end
end

task.spawn(function()
    AutoAcceptFriendRequests()
end)

task.spawn(function()
    MainLoop()
end)

Client.Idled:connect(function()
    local VirtualUser = game:GetService('VirtualUser')
    VirtualUser:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
    wait(1)
    VirtualUser:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
end)
